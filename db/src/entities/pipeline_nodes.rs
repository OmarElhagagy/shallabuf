//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pipeline_nodes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub pipeline_id: Uuid,
    pub node_id: Uuid,
    pub node_version: String,
    pub trigger_id: Option<Uuid>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::nodes::Entity",
        from = "Column::NodeId",
        to = "super::nodes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Nodes,
    #[sea_orm(has_many = "super::pipeline_nodes_exec::Entity")]
    PipelineNodesExec,
    #[sea_orm(
        belongs_to = "super::pipeline_triggers::Entity",
        from = "Column::TriggerId",
        to = "super::pipeline_triggers::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    PipelineTriggers,
    #[sea_orm(
        belongs_to = "super::pipelines::Entity",
        from = "Column::PipelineId",
        to = "super::pipelines::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Pipelines,
}

impl Related<super::nodes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nodes.def()
    }
}

impl Related<super::pipeline_nodes_exec::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineNodesExec.def()
    }
}

impl Related<super::pipeline_triggers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineTriggers.def()
    }
}

impl Related<super::pipelines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pipelines.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
