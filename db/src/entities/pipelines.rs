//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pipelines")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub description: Option<String>,
    pub from_template_id: Option<Uuid>,
    pub team_id: Uuid,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::pipeline_exec::Entity")]
    PipelineExec,
    #[sea_orm(has_many = "super::pipeline_nodes::Entity")]
    PipelineNodes,
    #[sea_orm(has_many = "super::pipeline_triggers::Entity")]
    PipelineTriggers,
    #[sea_orm(
        belongs_to = "super::teams::Entity",
        from = "Column::TeamId",
        to = "super::teams::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Teams,
    #[sea_orm(
        belongs_to = "super::templates::Entity",
        from = "Column::FromTemplateId",
        to = "super::templates::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Templates,
}

impl Related<super::pipeline_exec::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineExec.def()
    }
}

impl Related<super::pipeline_nodes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineNodes.def()
    }
}

impl Related<super::pipeline_triggers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineTriggers.def()
    }
}

impl Related<super::teams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Teams.def()
    }
}

impl Related<super::templates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Templates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
